# handlers/group_handlers.py

from telebot import TeleBot
from telebot.types import CallbackQuery, Message
import logging
from config import BOT_NAME
from utils.api import api_get, api_post, api_delete
from utils.states import AddGroupState
from keyboards.inline import (
    admin_groups_keyboard,
    user_groups_keyboard,
    delete_group_button,
    MAIN_MENU,
    add_comm_main_menu,
)

logger = logging.getLogger(__name__)


def register_handlers(bot: TeleBot):

    @bot.callback_query_handler(func=lambda call: call.data == "my_groups")
    def show_user_groups(call: CallbackQuery):
        username = call.from_user.username
        bot.answer_callback_query(call.id)

        groups = api_get(f"users/{username}/groups")
        if not groups:
            bot.edit_message_text(
                add_comm_main_menu(
                    f"""–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.

—Ç–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ https://t.me/{BOT_NAME}?start=join_klub-piterskikh-odinesnikov"""
                ),
                call.message.chat.id,
                call.message.message_id,
            )
            return

        bot.edit_message_text(
            "–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:", call.message.chat.id, call.message.message_id
        )
        for group in groups:
            bot.send_message(
                call.message.chat.id,
                f"üìå –ì—Ä—É–ø–ø–∞: <b>{group['title']}</b>",
                # TODO —Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –≥—Ä—É–ø–ø—ã
                # LinkGroup = f'{API_URL}/{group["id"]}'
                # f"üìå –ì—Ä—É–ø–ø–∞: <b>{group['title']}</b>\n üó∫Ô∏è –∫–∞—Ä—Ç–∞ –≥—Ä—É–ø–ø—ã: {LinkGroup}"
                reply_markup=user_groups_keyboard(group["id"]),
            )
        bot.send_message(call.message.chat.id, MAIN_MENU)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("leave_group_"))
    def leave_group(call: CallbackQuery):
        bot.answer_callback_query(call.id)
        group_id = call.data.split("_")[-1]
        username = call.from_user.username

        result = api_delete(f"leave-group/{group_id}", {"telegram_login": username})
        msg = (
            result.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—ã.")
            if result
            else "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API."
        )
        bot.edit_message_text(add_comm_main_menu(msg), call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "admin_groups")
    def admin_menu(call: CallbackQuery):
        bot.answer_callback_query(call.id)
        markup = admin_groups_keyboard()
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
        )

    @bot.callback_query_handler(func=lambda call: call.data == "list_managed_groups")
    def list_managed_groups(call: CallbackQuery):
        username = call.from_user.username
        bot.answer_callback_query(call.id)

        groups = api_get(f"admin-groups/{username}")
        if not groups:
            bot.edit_message_text(
                add_comm_main_menu("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ."),
                call.message.chat.id,
                call.message.message_id,
            )
            return

        bot.edit_message_text(
            "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —ç—Ç–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏:",
            call.message.chat.id,
            call.message.message_id,
        )
        for group in groups:
            link = f"https://t.me/{BOT_NAME}?start=join_{group['group_link']}"
            text = f"üìç <b>{group['title']}</b>\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {link}"
            bot.send_message(
                call.message.chat.id,
                text,
                reply_markup=delete_group_button(group["id"]),
            )
        bot.send_message(call.message.chat.id, MAIN_MENU)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_group_"))
    def delete_group(call: CallbackQuery):
        group_id = call.data.split("_")[-1]
        username = call.from_user.username
        result = api_delete(f"delete-group/{group_id}/{username}")
        if result:
            bot.edit_message_text(
                add_comm_main_menu("–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞."), call.message.chat.id, call.message.message_id
            )
        else:
            bot.edit_message_text(
                add_comm_main_menu("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã."),
                call.message.chat.id,
                call.message.message_id,
            )

    @bot.callback_query_handler(func=lambda call: call.data == "add_manage_group")
    def add_group_title(call: CallbackQuery):
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:",
            call.message.chat.id,
            call.message.message_id,
        )
        bot.set_state(call.from_user.id, AddGroupState.title, call.message.chat.id)

    @bot.message_handler(state=AddGroupState.title)
    def receive_group_title(message: Message):
        title = message.text
        username = message.from_user.username

        payload = {"title": title, "telegram_login": username}

        result = api_post("add-group", payload)

        if result and "group_link" in result:
            link = f"https://t.me/{BOT_NAME}?start=join_{result['group_link']}"
            bot.send_message(
                message.chat.id, f"–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ\nüîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {link}"
            )
            bot.send_message(message.chat.id, MAIN_MENU)

        else:
            bot.send_message(message.chat.id, add_comm_main_menu("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã."))

        bot.delete_state(message.from_user.id, message.chat.id)
